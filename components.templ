package main

import (
	"fmt"
	"strings"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)

var titleCaser cases.Caser = cases.Title(language.English)

templ base() {
	<html>
		<head>
			<title>Issue Tracker</title>
			<link href="/static/tailwind.css" rel="stylesheet"/>
			<script src="https://unpkg.com/htmx.org@1.9.10"></script>
		</head>
		<body>
			@header()
			<main class="w-1/2 mx-auto">
				{ children... }
			</main>
		</body>
	</html>
}

func generateIssueLabelChipStyle(label string) string {
	style := "p-1 text-sm rounded-full border"
	switch label {
	case "improvement":
		style = style + " border-teal-600/30 bg-teal-600/15 text-teal-600"
	case "bug":
		style = style + " border-rose-600/30 bg-rose-600/15 text-rose-600"
	}
	return style
}
func generateIssueLabelIndicatorStyle(label string) string {
	style := "size-4 rounded-full"
	switch label {
	case "improvement":
		style = style + " bg-teal-600/30"
	case "bug":
		style = style + " bg-rose-600/30"
	}
	return style
}

templ index(issues []Issue) {
	@base() {
		<div class="flex justify-between items-center py-2">
			<p class="font-bold">Issues</p>
			@linkButton("Create Issue", templ.Attributes{"href": "/issue/new"})
		</div>
		<ul class="bg-slate-300 list-none divide-y">
			for i:= len(issues)-1; i >= 0; i-- {
				<li class="p-2">
					<p>
						<span>[ { string(issues[i].Status) } ]</span>
						<a href={ templ.URL(fmt.Sprintf("/issue/%s", issues[i].Id)) } class="font-semibold">{ issues[i].Title }</a>
						for _, label := range strings.Split(issues[i].Labels, ",") {
							<span class={ generateIssueLabelChipStyle(label) }>
								{ string(label) }
							</span>
						}
					</p>
					<p class="italic">by { issues[i].Creator.Name } - { issues[i].CreatedAt.Format("02/01/2006 15:04") }</p>
				</li>
			}
		</ul>
	}
}

templ button(text string, attrs templ.Attributes) {
	<button class="px-4 py-2 rounded-md bg-slate-700 hover:bg-slate-600 text-white" { attrs... }>{ text }</button>
}

templ linkButton(text string, attrs templ.Attributes) {
	<a class="px-4 py-2 rounded-md bg-slate-700 hover:bg-slate-600 text-white" { attrs... }>{ text }</a>
}

templ header() {
	<a href="/">
		<header class="bg-slate-700 w-full text-white font-bold py-4 text-center">Issue Tracker</header>
	</a>
}

templ AddIssue() {
	@base() {
		<form hx-post="/api/issue" class="flex flex-col gap-2">
			@textInput("title")
			@textAreaInput("content")
			<div class="flex flex-col">
				<legend>Labels</legend>
				for _,opt := range issueLabels {
					<div class="flex gap-1">
						<input type="checkbox" id={ opt } name="labels" value={ opt }/>
						<label class="flex items-center gap-1" for={ opt }>
							<span class={ generateIssueLabelIndicatorStyle(opt) }></span>
							<span>{ titleCaser.String(opt) }</span>
						</label>
					</div>
				}
			</div>
			@button("Create", templ.Attributes{"type": "submit"})
		</form>
	}
}

templ IssueDetail(issue Issue) {
	@base() {
		<div>
			<p class="font-bold">{ issue.Title }</p>
			<p>{ issue.Content }</p>
			if issue.Status != "closed" {
				@button("Close", templ.Attributes{"hx-put": "/api/issue", "hx-trigger": "click", "hx-vals": fmt.Sprintf(`{"Id":
					"%s", "Status": "closed"}`, issue.Id)})
			}
		</div>
	}
}

templ textInput(name string) {
	<div class="flex flex-col">
		<label for={ name }>{ titleCaser.String(name) }</label>
		<input class="border rounded-md" id={ name } name={ name }/>
	</div>
}

templ textAreaInput(name string) {
	<div class="flex flex-col">
		<label for={ name }>{ titleCaser.String(name) }</label>
		<textarea class="border rounded-md" id={ name } name={ name }></textarea>
	</div>
}

templ selectInput(name string, opts []string) {
	<div class="flex flex-col">
		<label for={ name }>{ titleCaser.String(name) }</label>
		<select class="border rounded-md" id={ name } name={ name }>
			for _,opt := range opts {
				<option value={ opt }>{ opt }</option>
			}
		</select>
	</div>
}
